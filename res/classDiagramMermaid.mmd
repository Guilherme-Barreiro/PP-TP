classDiagram
%% Interfaces do contrato
class ILeague {
+getClubs():Club[]
}
class ISchedule {
+getMatches():Match[]
}
class ISeason {
+getYear():int
+getSchedule():ISchedule
+getStandings():IStanding[]
+getPointsPerWin():int
+getPointsPerDraw():int
+getPointsPerLoss():int
}
class IStanding {
+getClub():Club
+getPoints():int
}
class IMatch {
+getHome():Club
+getAway():Club
+getDate():LocalDate
+getEvents():IEvent[]
}
class IPlayer {
+getName():String
+getPosition():IPlayerPosition
+getPreferredFoot():PreferredFoot
}
class IPlayerPosition
class PreferredFoot
class IClub {
+getName():String
+getPlayers():IPlayer[]
}
class IFormation {
+getName():String
+getSlots():Map
}
class IPlayerSelector {
+selectStartingXI(IClub):IPlayer[]
}
class IEvent {
+getMinute():int
+getProbability():double
+occurs():boolean
}
class IGoalEvent {
+getScorer():IPlayer
}
class MatchSimulatorStrategy {
+simulatePerMinute(IMatch, int):IEvent[]
}
class IExporter {
+exportData(Object):void
}

    %% Carregamento de dados JSON
    class JsonImporter {
      +loadClubs(jsonPath:String):Club[]
      +loadPlayers(jsonPath:String):Player[]
      +loadSeasonData(jsonPath:String):Season
    }

    %% Implementação da API
    class Season {
      -year:int
      -schedule:ISchedule
      -standings:IStanding[]
      -ptsWin:int
      -ptsDraw:int
      -ptsLoss:int
      +Season(year:int, clubs:Club[])
      +generateSchedule():void
      +simulateNextMatch():MatchResult
      +calculateStandings():void
      +getStandings():IStanding[]
    }
    class League {
      -name:String
      -clubs:Club[]
      +League(name:String, clubs:Club[])
      +getClubs():Club[]
      +setClubs(clubs:Club[]):void
    }
    class Club {
      -name:String
      -players:Player[]
      -stats:TeamStats
      +Club(name:String, players:Player[])
      +getPlayers():Player[]
      +selectFormation(f:Formation):void
      +updateStats(result:MatchResult):void
    }
    class Player {
      -name:String
      -position:IPlayerPosition
      -foot:PreferredFoot
      -shooting:int
      -passing:int
      -speed:int
      -stats:PlayerStats
      +Player(name:String, pos:IPlayerPosition, foot:PreferredFoot)
      +updateStats(evt:IEvent):void
    }
    class Formation {
      -name:String
      -positions:IPlayerPosition[]
      -slots:int[]
      +Formation(name:String, positions:IPlayerPosition[], slots:int[])
      +getSlots():Map
    }
    class Squad {
      -positions:IPlayerPosition[]
      -players:Player[]
      +Squad(size:int)
      +assignPlayer(pos:IPlayerPosition, p:Player):void
      +getLineup():Player[]
    }
    class Match {
      -home:Club
      -away:Club
      -date:LocalDate
      -events:IEvent[]
      +Match(home:Club, away:Club, date:LocalDate)
      +play(strat:MatchSimulatorStrategy, homeSq:Squad, awaySq:Squad):MatchResult
      +getEvents():IEvent[]
    }
    class TeamStats {
      -played:int
      -wins:int
      -draws:int
      -losses:int
      -goalsFor:int
      -goalsAgainst:int
      +update(result:MatchResult):void
      +getPoints():int
    }
    class PlayerStats {
      -minutesPlayed:int
      -goals:int
      -assists:int
      -fouls:int
      +update(evt:IEvent):void
    }
    class DefaultMatchSimulatorStrategy {
      +simulatePerMinute(m:IMatch, minute:int):IEvent[]
    }
    class DefensiveStrategy {
      +simulatePerMinute(m:IMatch, minute:int):IEvent[]
    }

    %% Geradores HTML
    class ClubHtmlGenerator {
      +exportData(c:Club):void
    }
    class LeagueHtmlGenerator {
      +exportData(l:League):void
    }
    class MatchHtmlGenerator {
      +exportData(m:Match):void
    }
    class SeasonHtmlGenerator {
      +exportData(s:Season):void
    }

    %% Relações entre classes
    JsonImporter ..> Club
    JsonImporter ..> Player
    JsonImporter ..> Season
    Season ..|> ISeason
    Season --> ISchedule
    Season --> IStanding
    League ..|> ILeague
    Club ..|> IClub
    Player ..|> IPlayer
    Formation ..|> IFormation
    Squad ..|> IPlayerSelector
    Match ..|> IMatch
    DefaultMatchSimulatorStrategy ..|> MatchSimulatorStrategy
    DefensiveStrategy ..|> MatchSimulatorStrategy
    IEvent <|.. IGoalEvent
    Match --> IEvent
    Match --> Squad
    Club --> TeamStats
    Player --> PlayerStats
    ClubHtmlGenerator ..|> IExporter
    LeagueHtmlGenerator ..|> IExporter
    MatchHtmlGenerator ..|> IExporter
    SeasonHtmlGenerator ..|> IExporter
    ClubHtmlGenerator --> Club
    LeagueHtmlGenerator --> League
    MatchHtmlGenerator --> Match
    SeasonHtmlGenerator --> Season
